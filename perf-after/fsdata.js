(function () {
var fs = window.glov_webfs = window.glov_webfs || {};
fs['models/box_textured_embed.glb'] = [2252,'glTF~~~Ì\b~~h~~JSON{"asset":{"generator":"COLLADA2GLTF","version":"2.0"},"scene":0,"scenes":[{"nodes":[0]}],"nodes":[{"children":[1],"matrix":[1,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,1]},{"mesh":0}],"meshes":[{"primitives":[{"attributes":{"NORMAL":1,"POSITION":2,"TEXCOORD_0":3},"indices":0,"mode":4,"material":0}],"name":"Mesh"}],"accessors":[{"bufferView":0,"byteOffset":0,"componentType":5123,"count":36,"max":[23],"min":[0],"type":"SCALAR"},{"bufferView":1,"byteOffset":0,"componentType":5126,"count":24,"max":[1,1,1],"min":[-1,-1,-1],"type":"VEC3"},{"bufferView":1,"byteOffset":288,"componentType":5126,"count":24,"max":[0.5,0.5,0.5],"min":[-0.5,-0.5,-0.5],"type":"VEC3"},{"bufferView":2,"byteOffset":0,"componentType":5126,"count":24,"max":[6,1],"min":[0,0],"type":"VEC2"}],"materials":[{"pbrMetallicRoughness":{"baseColorTexture":{"index":0,"texCoord":0},"metallicFactor":0,"baseColorFactor":[1,1,1,1],"roughnessFactor":1},"name":"Texture","emissiveFactor":[0,0,0],"alphaMode":"OPAQUE","doubleSided":false}],"textures":[{"sampler":0,"source":0}],"samplers":[{"magFilter":9729,"minFilter":9986,"wrapS":10497,"wrapT":10497}],"bufferViews":[{"buffer":0,"byteOffset":0,"byteLength":72,"target":34963},{"buffer":0,"byteOffset":72,"byteLength":576,"byteStride":12,"target":34962},{"buffer":0,"byteOffset":648,"byteLength":192,"byteStride":8,"target":34962}],"buffers":[{"name":"box_textured","byteLength":840}]}H~~BIN~~~~~~~~~~~~~~\b~\t~\n~\v~\n~\t~\f~\r~~~~\r~~~~~~~~~~~~~~~~~~~~~~~?~~~~~~~~~~?~~~~~~~~~~?~~~~~~~~~~?~~?~~~~~~~~~~?~~~~~~~~~~?~~~~~~~~~~?~~~~~~~~~~~~~~?~~~~~~~~~~?~~~~~~~~~~?~~~~~~~~~~?~~~~~~~~~~¿~~~~~~~~~~¿~~~~~~~~~~¿~~~~~~~~~~¿~~~~~~¿~~~~~~~~~~¿~~~~~~~~~~¿~~~~~~~~~~¿~~~~~~~~~~~~~~~~~~¿~~~~~~~~~~¿~~~~~~~~~~¿~~~~~~~~~~¿~~~¿~~~¿~~~?~~~?~~~¿~~~?~~~¿~~~?~~~?~~~?~~~?~~~?~~~?~~~?~~~?~~~?~~~¿~~~?~~~?~~~?~~~¿~~~?~~~¿~~~¿~~~¿~~~?~~~?~~~?~~~?~~~?~~~¿~~~?~~~¿~~~?~~~?~~~¿~~~?~~~¿~~~?~~~¿~~~¿~~~?~~~?~~~¿~~~¿~~~¿~~~¿~~~¿~~~¿~~~¿~~~?~~~¿~~~?~~~?~~~¿~~~¿~~~¿~~~¿~~~?~~~¿~~~¿~~~¿~~~¿~~~¿~~~?~~~¿~~~?~~~¿~~~¿~~~?~~~?~~~¿~~À@~~~~~~ @~~~~~~À@þÿ?~~ @þÿ?~~@~~~~~~ @~~~~~~@~~?~~ @~~?~~~@~~~~~~?~~~~~~~@~~?~~?~~?~~@@~~~~~~@~~~~~~@@~~?~~@~~?~~@@~~~~~~~@~~~~~~@@~~?~~~@~~?~~~~~~~~~~~~þÿ?~~?~~~~~~?þÿ?'];
fs['shaders/default.fp'] = [1031,'// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n#pragma WebGL\n\nprecision lowp float;\n\nuniform sampler2D tex0; // source\n\nuniform vec3 light_diffuse;\nuniform vec3 light_dir_vs;\nuniform vec3 ambient;\n\nvarying vec4 interp_color;\nvarying vec2 interp_texcoord;\nvarying vec3 interp_normal_vs;\n\nvoid main(void) {\n  vec4 texture0 = texture2D(tex0, interp_texcoord.xy);\n#ifndef NOGAMMA\n  texture0.rgb = texture0.rgb * texture0.rgb; // pow(2)\n#endif\n  vec4 albedo = texture0 * interp_color;\n  if (albedo.a < 0.01) // TODO: Probably don\'t want this, but makes hacking transparent things together easier for now\n    discard;\n\n  vec3 normal_vs = normalize(interp_normal_vs);\n  float diffuse = max(0.0, 0.5 + 0.5 * dot(normal_vs, -light_dir_vs.rgb));\n\n  vec3 light_color = diffuse * light_diffuse.rgb + ambient.rgb;\n  gl_FragColor = vec4(light_color * albedo.rgb, albedo.a);\n\n#ifndef NOGAMMA\n  gl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0/2.0));\n#endif\n}'];
fs['shaders/default.vp'] = [974,'// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n#pragma WebGL\nprecision highp float;\n\n// per-vertex input\nattribute vec3 POSITION;\n//attribute vec3 COLOR;\nattribute vec2 TEXCOORD;\nattribute vec3 NORMAL;\n\n// per-drawcall input\nuniform mat3 mv_inv_trans;\nuniform mat4 projection;\nuniform mat4 mat_mv;\nuniform vec4 color;\n\n// output\nvarying vec4 interp_color;\nvarying vec2 interp_texcoord;\nvarying vec3 interp_normal_vs;\n// varying vec3 interp_pos_vs;\n\nvoid main(void) {\n  //interp_color = vec4(COLOR * color.rgb, color.a);\n  interp_color = color;\n  interp_texcoord = vec2(TEXCOORD);\n  interp_normal_vs = mv_inv_trans * NORMAL;\n  // gl_Position = vec4(POSITION, 1.0);\n\n  // gl_Position = mat_vp * (mat_m * vec4(POSITION, 1.0));\n  // gl_Position = mvp * vec4(POSITION, 1.0);\n  vec4 pos_vs = mat_mv * vec4(POSITION, 1.0);\n  // interp_pos_vs = pos_vs.xyz;\n  gl_Position = projection * pos_vs;\n}'];
fs['shaders/effects_bloom_merge.fp'] = [1119,'#pragma WebGL2\n\nprecision highp float;\nprecision highp int;\n\nvarying vec2 interp_texcoord;\n\nvec4 _ret_0;\nvec4 _TMP3;\nvec4 _TMP5;\nfloat _TMP2;\nvec4 _TMP1;\nfloat _TMP0;\nvec4 _TMP36;\nuniform float bloomSaturation;\nuniform float originalSaturation;\nuniform float bloomIntensity;\nuniform float originalIntensity;\nuniform sampler2D inputTexture0;\nuniform sampler2D inputTexture1;\n\nvoid main()\n{\nvec4 _orig;\nvec4 _bloom;\n_orig = texture2D(inputTexture0, interp_texcoord);\n_bloom = texture2D(inputTexture1, interp_texcoord);\n_TMP0 = dot(_bloom.xyz, vec3(2.12599993E-01, 7.15200007E-01, 7.22000003E-02));\n_TMP1 = vec4(_TMP0, _TMP0, _TMP0, _TMP0) + bloomSaturation * (_bloom - vec4(_TMP0, _TMP0, _TMP0, _TMP0));\n_bloom = _TMP1 * bloomIntensity;\n_TMP2 = dot(_orig.xyz, vec3(2.12599993E-01, 7.15200007E-01, 7.22000003E-02));\n_TMP3 = vec4(_TMP2, _TMP2, _TMP2, _TMP2) + originalSaturation * (_orig - vec4(_TMP2, _TMP2, _TMP2, _TMP2));\n_TMP5 = min(vec4(1.0, 1.0, 1.0, 1.0), _bloom);\n_TMP36 = max(vec4(0.0, 0.0, 0.0, 0.0), _TMP5);\n_orig = (_TMP3 * (1.0 - _TMP36)) * originalIntensity;\n_ret_0 = _bloom + _orig;\ngl_FragColor = _ret_0;\n}\n'];
fs['shaders/effects_bloom_threshold.fp'] = [741,'#pragma WebGL2\n\nprecision highp float;\nprecision highp int;\n\nvarying vec2 interp_texcoord;\n\nvec4 _ret_0;\nfloat _TMP1;\nfloat _TMP0;\nfloat _a0025;\nfloat _x0027;\nuniform float bloomThreshold;\nuniform float thresholdCutoff;\nuniform sampler2D inputTexture0;\n\nvoid main()\n{\nvec4 _col;\nfloat _luminance;\nfloat _x;\nfloat _cut;\n_col = texture2D(inputTexture0, interp_texcoord);\n_luminance = dot(_col.xyz, vec3(2.12599993E-01, 7.15200007E-01, 7.22000003E-02));\n_x = float((_luminance >= bloomThreshold));\n_a0025 = 3.14159274 * (_luminance / bloomThreshold - 0.5);\n_TMP0 = sin(_a0025);\n_x0027 = 0.5 * (1.0 + _TMP0);\n_TMP1 = pow(_x0027, thresholdCutoff);\n_cut = bloomThreshold * _TMP1;\n_ret_0 = (_x + (1.0 - _x) * _cut) * _col;\ngl_FragColor = _ret_0;\n}\n'];
fs['shaders/effects_color_matrix.fp'] = [454,'#pragma WebGL2\n\nprecision lowp float;\n\nvarying vec2 interp_texcoord;\n\nuniform vec4 colorMatrix[3];\nuniform sampler2D tex0;\n\nvoid main()\n{\n  vec4 _color;\n  vec4 _mutc;\n  _color = texture2D(tex0, interp_texcoord);\n  _mutc = _color;\n  _mutc.w = 1.0;\n  vec3 _r0019;\n  _r0019.x = dot(colorMatrix[0], _mutc);\n  _r0019.y = dot(colorMatrix[1], _mutc);\n  _r0019.z = dot(colorMatrix[2], _mutc);\n  _mutc.xyz = _r0019;\n  _mutc.w = _color.w;\n  gl_FragColor = _mutc;\n}'];
fs['shaders/effects_copy.fp'] = [179,'#pragma WebGL2\n\nprecision lowp float;\n\nvarying vec2 interp_texcoord;\n\nuniform sampler2D inputTexture0;\nvoid main()\n{\n  gl_FragColor = texture2D(inputTexture0, interp_texcoord);\n}\n'];
fs['shaders/effects_copy.vp'] = [280,'#pragma WebGL2\nprecision highp float;\n\nvarying vec2 interp_texcoord;\nattribute vec2 POSITION;\n\nuniform vec2 copy_uv_scale;\nuniform vec4 clip_space;\n\nvoid main()\n{\n  interp_texcoord = POSITION * copy_uv_scale;\n  gl_Position = vec4(POSITION * clip_space.xy + clip_space.zw, 0, 1);\n}'];
fs['shaders/effects_distort.fp'] = [728,'#pragma WebGL2\n\nprecision highp float;\nprecision highp int;\n\nvarying vec2 interp_texcoord;\n\nvec4 _ret_0;\nvec2 _UV1;\nvec4 _TMP1;\nvec2 _r0020;\nvec2 _r0028;\nvec2 _v0028;\nuniform vec2 strength;\nuniform vec3 transform[2];\nuniform vec2 invTransform[2];\nuniform sampler2D inputTexture0;\nuniform sampler2D distortTexture;\n\nvoid main()\n{\nvec3 _uvt;\n_uvt = vec3(interp_texcoord.x, interp_texcoord.y, 1.0);\n_r0020.x = dot(transform[0], _uvt);\n_r0020.y = dot(transform[1], _uvt);\n_TMP1 = texture2D(distortTexture, _r0020);\n_v0028 = _TMP1.xy - 0.5;\n_r0028.x = dot(invTransform[0], _v0028);\n_r0028.y = dot(invTransform[1], _v0028);\n_UV1 = interp_texcoord + _r0028 * strength;\n_ret_0 = texture2D(inputTexture0, _UV1);\ngl_FragColor = _ret_0;\n}\n'];
fs['shaders/effects_gaussian_blur.fp'] = [721,'#pragma WebGL2\n\nprecision lowp float;\n\nvarying vec2 interp_texcoord;\n\nvec4 _ret_0;\nvec4 _TMP2;\nvec4 _TMP1;\nvec2 _c0022;\nvec2 _c0024;\nuniform vec3 sampleRadius;\nuniform sampler2D inputTexture0;\n\nvoid main()\n{\n  vec2 uv = interp_texcoord;\n  vec2 step = sampleRadius.xy;\n  float glow = sampleRadius.z;\n  gl_FragColor =\n    ((texture2D(inputTexture0, uv - step * 3.0) + texture2D(inputTexture0, uv + step * 3.0)) * 0.085625 +\n    (texture2D(inputTexture0, uv - step * 2.0) + texture2D(inputTexture0, uv + step * 2.0)) * 0.12375 +\n    (texture2D(inputTexture0, uv - step * 1.0) + texture2D(inputTexture0, uv + step * 1.0)) * 0.234375 +\n    texture2D(inputTexture0, uv) * 0.3125) * 0.83333333333333333333333333333333 * glow;\n}\n'];
fs['shaders/error.fp'] = [78,'#pragma WebGL\n\nvoid main(void) {\n  gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);\n}\n'];
fs['shaders/error.vp'] = [289,'// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n#pragma WebGL\nattribute vec2 POSITION;\nvoid main() {\n  gl_Position = vec4(POSITION.xy * vec2(2.0 / 1024.0, -2.04 / 1024.0) + vec2(-1.0, 1.0), 0.0, 1.0);\n}\n'];
fs['shaders/error_gl2.fp'] = [79,'#pragma WebGL2\n\nvoid main(void) {\n  gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);\n}\n'];
fs['shaders/font_aa.fp'] = [568,'// Portions Copyright 2022 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n#pragma WebGL2\n\nprecision lowp float;\n\nvarying vec2 interp_texcoord;\nvarying lowp vec4 interp_color;\nuniform sampler2D tex0;\nuniform mediump vec4 param0;\nvoid main()\n{\n  // Body\n  float sdf = texture2D(tex0,interp_texcoord).r;\n  float blend_t = clamp(sdf * param0.x + param0.y, 0.0, 1.0);\n  #ifdef NOPREMUL\n  gl_FragColor = vec4(interp_color.rgb, interp_color.a * blend_t);\n  #else\n  gl_FragColor = interp_color * blend_t;\n  #endif\n}\n'];
fs['shaders/font_aa_glow.fp'] = [957,'// Portions Copyright 2022 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n#pragma WebGL2\n\nprecision lowp float;\n\nvarying vec2 interp_texcoord;\nvarying lowp vec4 interp_color;\nuniform sampler2D tex0;\nuniform mediump vec4 param0;\nuniform vec4 glow_color;\nuniform mediump vec4 glow_params;\nvoid main()\n{\n  // Body\n  float sdf = texture2D(tex0, interp_texcoord).r;\n  float blend_t = clamp(sdf * param0.x + param0.y, 0.0, 1.0);\n  // Glow\n  vec2 glow_coord = interp_texcoord + glow_params.xy;\n  float sdf_glow = texture2D(tex0, glow_coord).r;\n  float glow_t = clamp(sdf_glow * glow_params.z + glow_params.w, 0.0, 1.0);\n  // Composite\n  #ifdef NOPREMUL\n  vec4 my_glow_color = vec4(glow_color.xyz, glow_t * glow_color.w);\n  gl_FragColor = mix(my_glow_color, interp_color, blend_t);\n  #else\n  vec4 my_glow_color = glow_color * glow_t;\n  gl_FragColor = mix(my_glow_color, interp_color, blend_t);\n  #endif\n}\n'];
fs['shaders/font_aa_outline.fp'] = [855,'// Portions Copyright 2022 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n#pragma WebGL2\n\nprecision lowp float;\n\nvarying highp vec2 interp_texcoord;\nvarying lowp vec4 interp_color;\nuniform sampler2D tex0;\nuniform mediump vec4 param0;\nuniform vec4 outline_color;\nvoid main()\n{\n  // Body\n  float sdf = texture2D(tex0, interp_texcoord).r;\n  float blend_t = clamp(sdf * param0.x + param0.y, 0.0, 1.0);\n  // Outline\n  float outline_t = clamp(sdf * param0.x + param0.z, 0.0, 1.0);\n  // Composite\n  #ifdef NOPREMUL\n  outline_t = outline_t * outline_color.w;\n  vec4 outcolor = vec4(outline_color.xyz, outline_t);\n  gl_FragColor = mix(outcolor, interp_color, blend_t);\n  #else\n  vec4 my_outline_color = outline_color * outline_t;\n  gl_FragColor = mix(my_outline_color, interp_color, blend_t);\n  #endif\n}\n'];
fs['shaders/font_aa_outline_glow.fp'] = [1988,'// Portions Copyright 2022 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n#pragma WebGL2\n\nprecision lowp float;\n\nvarying highp vec2 interp_texcoord;\nvarying lowp vec4 interp_color;\nuniform sampler2D tex0;\nuniform mediump vec4 param0;\nuniform vec4 outline_color;\nuniform vec4 glow_color;\nuniform mediump vec4 glow_params;\n\nvoid main()\n{\n  // Body\n  float sdf = texture2D(tex0, interp_texcoord).r;\n  float blend_t = clamp(sdf * param0.x + param0.y, 0.0, 1.0);\n  // Outline\n  float outline_t = clamp(sdf * param0.x + param0.z, 0.0, 1.0);\n  // Glow\n  vec2 glow_coord = interp_texcoord + glow_params.xy;\n  float sdf_glow = texture2D(tex0, glow_coord).r;\n  float glow_t = clamp(sdf_glow * glow_params.z + glow_params.w, 0.0, 1.0);\n\n  // Composite\n  #ifdef NOPREMUL\n  // Outline on top of glow\n  vec4 my_glow_color = vec4(glow_color.xyz, glow_t * glow_color.w);\n  // Previously had the following (blends better with soft outline on hard glow, but breaks alpha-fade of whole style, see below)\n  // outline_t = outline_t * outline_color.w;\n  vec4 outcolor = mix(my_glow_color, outline_color, outline_t);\n  // Body on top of that\n  gl_FragColor = mix(outcolor, interp_color, blend_t);\n  #else\n  // Outline on top of glow\n  vec4 my_glow_color = glow_color * glow_t;\n\n  // This allows a soft outline to blend well through to a glow underneath, but\n  //   causes the colors to bleed when the whole style is faded:\n  // vec4 my_outline_color = outline_color * outline_t;\n  // vec4 outcolor = my_outline_color + (1.0 - my_outline_color.a) * my_glow_color; // Equivalent to glBlendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)\n\n  // Instead, this allows fading of the entire color by an alpha to keep the relative colors:\n  // vec4 outcolor = my_outline_color + (1.0 - outline_t) * my_glow_color;\n  vec4 outcolor = mix(my_glow_color, outline_color, outline_t);\n\n  // Body on top of that\n  gl_FragColor = mix(outcolor, interp_color, blend_t);\n  #endif\n}\n'];
fs['shaders/pixely_expand.fp'] = [2479,'// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n#pragma WebGL2\n\nprecision mediump float;\nprecision mediump int;\n\nvarying highp vec2 interp_texcoord;\nuniform sampler2D inputTexture0; // source\nuniform sampler2D inputTexture1; // hblur\nuniform sampler2D inputTexture2; // hblur+vblur\nuniform vec4 orig_pixel_size;\n\n// 1D Gaussian.\nfloat Gaus(float pos, float scale) {\n  return exp2(scale*pos*pos);\n}\n\nconst float SHADE = 0.75;\nconst float EASING = 1.25;\n\n#define DO_WARP\n#ifdef DO_WARP\nconst float VIGNETTE = 0.5;\n// Display warp.\n// 0.0 = none\n// 1.0/8.0 = extreme\nconst vec2 WARP=vec2(1.0/32.0,1.0/24.0);\n\n// Distortion of scanlines, and end of screen alpha.\nvec2 Warp(vec2 pos){\n  pos=pos*2.0-1.0;\n  pos*=vec2(1.0+(pos.y*pos.y)*WARP.x,1.0+(pos.x*pos.x)*WARP.y);\n  return pos*0.5+0.5;\n}\n#else\n#define Warp(v) v\n#endif\n\nfloat easeInOut(float v) {\n  float va = pow(v, EASING);\n  return va / (va + pow((1.0 - v), EASING));\n}\n\nfloat easeIn(float v) {\n  return 2.0 * easeInOut(0.5 * v);\n}\n\nfloat easeOut(float v) {\n  return 2.0 * easeInOut(0.5 + 0.5 * v) - 1.0;\n}\n\nvoid main()\n{\n  vec2 texcoords = Warp(interp_texcoord);\n  vec2 intcoords = (floor(texcoords.xy * orig_pixel_size.xy) + 0.5) * orig_pixel_size.zw;\n  vec2 deltacoords = (texcoords.xy - intcoords) * orig_pixel_size.xy; // -0.5 ... 0.5\n  // for horizontal sampling, map [-0.5 .. -A .. A .. 0.5] -> [-0.5 .. 0 .. 0 .. 0.5];\n  float A = 0.25;\n  float Ainv = (0.5 - A) * 2.0;\n  float uoffs = clamp((abs(deltacoords.x) - A) / Ainv, 0.0, 1.0) * orig_pixel_size.z;\n  uoffs *= sign(deltacoords.x);\n  vec2 sample_coords = vec2(intcoords.x + uoffs, intcoords.y);\n  // sample_coords = intcoords;\n  vec3 color = texture2D(inputTexture1, sample_coords).rgb;\n  vec3 color_scanline = texture2D(inputTexture2, texcoords.xy + vec2(0.0, 0.5 * orig_pixel_size.w)).rgb * SHADE;\n  // color_scanline = vec3(0);\n\n  // float mask = Gaus(deltacoords.y, -12.0);\n  float mask = easeOut(2.0*(0.5 - abs(deltacoords.y)));\n  // float mask = abs(deltacoords.y) > 0.25 ? 0.0 : 1.0;\n  color = mix(color_scanline, color, mask);\n  // color = vec3(mask);\n\n#ifdef DO_WARP\n  // vignette\n  float dist = min(1.0, 100.0 * min(0.5 - abs(texcoords.x - 0.5), 0.5 - abs(texcoords.y - 0.5)));\n  color *= (1.0 - VIGNETTE) + VIGNETTE * dist;\n#endif\n\n  gl_FragColor = vec4(color, 1.0);\n  // gl_FragColor = vec4(color_scanline, 1.0);\n  // gl_FragColor = vec4(sample_coords, 0.0, 1.0);\n}\n'];
fs['shaders/snapshot.fp'] = [528,'#pragma WebGL2\n\nprecision lowp float;\n\nuniform sampler2D tex0;\nuniform sampler2D tex1;\nuniform lowp vec4 color1;\n\nvarying lowp vec4 interp_color;\nvarying vec2 interp_texcoord;\n\nvoid main(void) {\n  vec3 texA = texture2D(tex0,interp_texcoord).rgb;\n  float texB = texture2D(tex1,interp_texcoord).r;\n  float alpha = texA.r - texB + 1.0;\n  // TODO: (perf?) (quality?) better to output pre-multiplied alpha (texA) and change state?\n  vec3 orig_rgb = texA / max(0.01, alpha);\n  gl_FragColor = vec4(orig_rgb, alpha * interp_color.a);\n}\n'];
fs['shaders/sprite.fp'] = [231,'#pragma WebGL2\n\nprecision lowp float;\n\nuniform sampler2D tex0;\n\nvarying lowp vec4 interp_color;\nvarying vec2 interp_texcoord;\n\nvoid main(void) {\n  vec4 tex = texture2D(tex0, interp_texcoord);\n  gl_FragColor = tex * interp_color;\n}\n'];
fs['shaders/sprite.vp'] = [533,'// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n#pragma WebGL2\nprecision highp float;\n\n// per-vertex input\nattribute vec2 POSITION;\nattribute vec4 COLOR;\nattribute vec2 TEXCOORD;\n\n// output\nvarying lowp vec4 interp_color;\nvarying vec2 interp_texcoord;\n\n// global parameters\nuniform vec4 clip_space;\n\nvoid main()\n{\n  interp_texcoord = TEXCOORD;\n  interp_color = COLOR;\n  gl_Position = vec4(POSITION.xy * clip_space.xy + clip_space.zw, 0.0, 1.0);\n}\n'];
fs['shaders/sprite_dual.fp'] = [567,'#pragma WebGL2\n\nprecision lowp float;\n\nuniform sampler2D tex0;\nuniform sampler2D tex1;\nuniform lowp vec4 color1;\n\nvarying lowp vec4 interp_color;\nvarying vec2 interp_texcoord;\n\nvoid main(void) {\n  vec4 texA = texture2D(tex0,interp_texcoord);\n  vec2 texB = texture2D(tex1,interp_texcoord).rg;\n  float value = dot(texA.rgb, vec3(0.2, 0.5, 0.3));\n  vec3 valueR = value * interp_color.rgb;\n  vec3 valueG = value * color1.rgb;\n  vec3 value3 = mix(texA.rgb, valueG, texB.g);\n  value3 = mix(value3, valueR, texB.r);\n  gl_FragColor = vec4(value3, texA.a * interp_color.a);\n}\n'];
fs['shaders/test.fp'] = [2008,'#pragma WebGL2\nprecision mediump float;\nprecision mediump int;\n\nvarying lowp vec4 interp_color;\nvarying highp vec2 interp_texcoord;\nuniform vec4 params;\n\n// Partially From: https://www.shadertoy.com/view/lsl3RH\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// See here for a tutorial on how to make this: http://www.iquilezles.org/www/articles/warp/warp.htm\n\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat noise( in vec2 x )\n{\n  return sin(1.5*x.x)*sin(1.5*x.y);\n}\n\nfloat fbm4( vec2 p )\n{\n  float f = 0.0;\n  f += 0.5000*noise( p ); p = m*p*2.02;\n  f += 0.2500*noise( p ); p = m*p*2.03;\n  f += 0.1250*noise( p ); p = m*p*2.01;\n  f += 0.0625*noise( p );\n  return f/0.9375;\n}\n\nfloat fbm6( vec2 p )\n{\n  float f = 0.0;\n  f += 0.500000*(0.5+0.5*noise( p )); p = m*p*2.02;\n  f += 0.250000*(0.5+0.5*noise( p )); p = m*p*2.03;\n  f += 0.125000*(0.5+0.5*noise( p )); p = m*p*2.01;\n  f += 0.062500*(0.5+0.5*noise( p )); p = m*p*2.04;\n  f += 0.031250*(0.5+0.5*noise( p )); p = m*p*2.01;\n  f += 0.015625*(0.5+0.5*noise( p ));\n  return f/0.96875;\n}\n\n\nfloat func( vec2 q )\n{\n  float iTime = params.w;\n  float ql = length( q );\n  q.x += 0.05*sin(0.27*iTime+ql*4.1);\n  q.y += 0.05*sin(0.23*iTime+ql*4.3);\n  q *= 0.5;\n\n  vec2 o = vec2(0.0);\n  o.x = 0.5 + 0.5*fbm4( vec2(2.0*q          )  );\n  o.y = 0.5 + 0.5*fbm4( vec2(2.0*q+vec2(5.2))  );\n\n  float ol = length( o );\n  o.x += 0.02*sin(0.12*iTime+ol)/ol;\n  o.y += 0.02*sin(0.14*iTime+ol)/ol;\n\n  vec2 n;\n  n.x = fbm6( vec2(4.0*o+vec2(9.2))  );\n  n.y = fbm6( vec2(4.0*o+vec2(5.7))  );\n\n  vec2 p = 4.0*q + 4.0*n;\n\n  float f = 0.5 + 0.5*fbm4( p );\n\n  f = mix( f, f*f*f*3.5, f*abs(n.x) );\n\n  float g = 0.5 + 0.5*sin(4.0*p.x)*sin(4.0*p.y);\n  f *= 1.0-0.5*pow( g, 8.0 );\n\n  return f;\n}\n\n\n\nvec3 doMagic(vec2 p)\n{\n  vec2 q = p*5.0;\n\n  float f = func(q);\n\n  vec3 col = mix(interp_color.rgb, params.rgb, f );\n  return col;\n}\n\nvoid main()\n{\n  gl_FragColor = vec4( doMagic( interp_texcoord ), 1.0 );\n}\n'];
fs['shaders/transition_pixelate.fp'] = [956,'#pragma WebGL2\n\nprecision lowp float;\n\nvarying highp vec2 interp_texcoord;\n\nuniform sampler2D tex0;\nuniform vec4 param0;\nuniform vec4 param1;\n\nvoid main(void)\n{\n  vec2 interp_uvs = interp_texcoord;\n  // TODO: for best look, should generate an appropriate mipmap and sample from that/just render it w/ nearest neighbor\n  // result = texture2D(tex0, min(floor(interp_uvs.xy * param0.xy + 0.5) * param0.zw - param1.xy, param1.zw) );\n\n  // Unlike ARBfp version, shift RGB channels separately (3x slowdown)\n  vec4 texture0r = texture2D(tex0, min(floor(interp_uvs.xy * param0.xy + vec2(0.58, 0.5)) * param0.zw - param1.xy, param1.zw) );\n  vec4 texture0g = texture2D(tex0, min(floor(interp_uvs.xy * param0.xy + vec2(0.5, 0.48)) * param0.zw - param1.xy, param1.zw) );\n  vec4 texture0b = texture2D(tex0, min(floor(interp_uvs.xy * param0.xy + vec2(0.42, 0.5)) * param0.zw - param1.xy, param1.zw) );\n  gl_FragColor = vec4(texture0r.r, texture0g.g, texture0b.b, 1);\n}\n'];
fs['spine/dino.atlas'] = [545,'dino.png\nsize:512,128\nfilter:Linear,Linear\nE_Arm_Front\nbounds:91,4,26,28\noffsets:5,5,36,38\nrotate:90\nE_Body\nbounds:91,34,89,76\noffsets:5,5,99,86\nrotate:90\nE_Foot_Front\nbounds:270,5,45,30\noffsets:5,5,55,40\nrotate:90\nE_Head\nbounds:4,26,97,83\noffsets:57,5,159,93\nrotate:90\nE_Jaw\nbounds:271,60,63,61\noffsets:5,5,73,71\nrotate:90\nE_Leg_1\nbounds:171,5,39,47\noffsets:5,5,49,57\nrotate:90\nE_Leg_2\nbounds:222,13,31,44\noffsets:5,5,41,54\nrotate:90\nE_Tail\nbounds:171,48,75,49\noffsets:5,5,85,59\nrotate:90\nShadow\nbounds:224,54,69,43\noffsets:5,5,79,53\nrotate:90\n'];
fs['spine/dino.skel'] = [3982,'­t;vkÁá4.0.64Â~~ÁÞ~~CÁÞ\bC.½~\f\fE_Arm_FrontE_Body\rE_Foot_Front\rE_Foot_FrontE_HeadE_Jaw\bE_Leg_1\bE_Leg_1\bE_Leg_2\bE_Leg_2E_TailShadow\froot~~~~~~~~~~~~?~~?~~~~~~~~~~~~~~~~E_Body~~~~~CiìBy{?~~?~~~~~~~~~~~~~~~~\fE_Arm_FrontÂzáA¶õÃÀº=q?~~?~~~~~~~~~~A´Qì~~\rE_Leg_Back_1ÂYzáÀé¿#×\n?~~?~~~~~~~~~~AäáH~~\rE_Leg_Back_2Âhp¤Aôff¾#×\n?~~?~~~~~~~~~~AÌÍ~~\fE_Foot_BackBÝffAáH@g®?~~?~~~~~~~~~~A®~~E_Leg_Front_1Â³3Á\v®À¬ÌÍ?~~?~~~~~~~~~~AèÌÍ~~E_Leg_Front_2Â%QìBõÃ¿ë?~~?~~~~~~~~~~AáH~~\rE_Foot_FrontBÐ~AìÌÍ@LÌÍ?~~?~~~~~~~~~~A\\)~~E_Head@\\)BÂAÞõÃ?~~?~~~~~~~~~~B^33~~E_Jaw\tÁý×\nA^ffÀS33?~~?~~~~~~~~~~B~~E_TailÃ)J=ÁÊõÃ~~~~?~~?~~~~~~~~~~Bw\\)~~\fShadow~ÿÿÿ2ÿÿÿÿ\f~\fE_Foot_Backÿÿÿÿÿÿÿÿ~\tE_Leg_B2ÿÿÿÿÿÿÿÿ\n~\tE_Leg_B1ÿÿÿÿÿÿÿÿ\b~E_Bodyÿÿÿÿÿÿÿÿ~E_Jaw\nÿÿÿÿÿÿÿÿ~E_Head\tÿÿÿÿÿÿÿÿ~\fE_Arm_Frontÿÿÿÿÿÿÿÿ~\rE_Foot_Front\bÿÿÿÿÿÿÿÿ~\tE_Leg_F1ÿÿÿÿÿÿÿÿ\b~\tE_Leg_F2ÿÿÿÿÿÿÿÿ\n~E_Tail\vÿÿÿÿÿÿÿÿ\v~~~~\f~~~BzáAáH¿Ê=q?~~?~~B~~B~~ÿÿÿÿ~~~~~~~@p£×¿?~~?~~BÆ~~B¬~~ÿÿÿÿ~~~?ã×\n@µp¤@{?|î?|îB\\~~B ~~ÿÿÿÿ\b~~~@{AL(ö>~~?~~?~~B\\~~B ~~ÿÿÿÿ~~~À\\)@A (ö?~~?~~C~~Bº~~ÿÿÿÿ~~~AÕëAffA#\\)?~~?~~B~~B~~ÿÿÿÿ\b~~~BYzáAk\n=?¦ff?A%?A%BD~~Bd~~ÿÿÿÿ\n~~~Büff@\\)¿ª=q?|î?|îB$~~BX~~ÿÿÿÿ\t\b~~~B³3Aw33>³33?~~?~~BD~~Bd~~ÿÿÿÿ\n\n~~~BØ\\)AW×\n@(Qì?~~?~~B$~~BX~~ÿÿÿÿ\v\v~~~C)J=Aè¸R@ £×?~~?~~Bª~~Bl~~ÿÿÿÿ~\f~~~~~~~?À~~¿ ~~?~~?~~B~~BT~~ÿÿÿÿ~~idle\t~\b~~~~~~~~~~?~~~ÁC\n=~?³34~~~~~?ÕUVA[33~@~~~~~~~~~~~~~Ãp{À?~~ÃqÀÆ{~@~~~Ãp{À~\b~~~~~~~~~~?~~@L(ö~@~~~~~~~~\t~~~~~~~~~~?~~¿B\\~@~~~~~~~~~~~~~~~~~~~~~?~~?Ç®~~~~~@~~~~~~~~~~~~\n~~?~~~~~~?»»¼Á~@~~~~~~~~~~~~~~~~~~?~~@®~@~~~~~~~~~~~~~~~~~~?~~Àý¸~@~~~~~~~~\v~~~~~~~~~~?~~À×\n~@~~~~~~~~~~~~~~\nidle_left\v~\t~~~~~~~~~~?~~~ÁC\n=~?³34~~~~~?ÕUVA[33~@~~~~~~~~~~~~~ÃoJ=À?~~ÃoJ=ÀÝp¤~@~~~ÃoJ=À~\b~~~~~~~~~~?~~@L(ö~@~~~~~~~~\t~~~~~~~~~~?~~¿B\\~@~~~~~~~~~~~~~~~~~~~~~?~~?Ç®~~~~~@~~~~~~~~~~~~\n~~?~~~~~~?»»¼Á~@~~~~~~~~~~~~~~~~~~?~~@®~@~~~~~~~~~~~~~~~~~~~~~?~~~~~~?Tzá~@~~~~~~~~~~~~~~~~~~~~~~?~~Àý¸~@~~~~~~~~\v~~~~~~~~~~?~~À×\n~@~~~~~~~~~~~~~~¿~~?~~~~~~~~run~\n~~~~~~~~~~?~~~Àtzá~?~~~~~~~~~~~~Ãp{ÀÈ£×?~~~Ãp{À(Qì~?~~Ãp{ÀÈ£×~?À~Ãp{¿xQì~@~~~Ãp{ÀÈ£×~~~~~~~~~~~>LÌÎÁõÃ~?334Aôfe~?~~AW~@~~~~~~~~~~~~~~~~~~~~~?334¿s33?B\\~?~~>æff?÷\n=~@~~~~~~~~~~~~\b~~~~~~ÁÎzá?B\nQì~?~~?Ë ~?Á-ë~?ÙA34~@~~~ÁÎzà~~~~~~À½¸¾¨õÃ?~~?¦ff¿¾¸R~?Ù@L(öÀG\n=~@~~~À½¸¾¨õÃ~\t~~~~~~~~~~?""#@³×\n~?ªª«ÀÌÎ~@~~~~~~~~~~~~~~~~~~~~~?""#?=q¿333~?ªª«@{¿¸R~@~~~~~~~~~~~~\n~~>îîð~~~~?;»¼Áå×\n~?ffgÀ`~~~~~~~~~~~?~~ÂaH~@~~~~~~~~~~~~~An=qÁ.¸R~~~~~~Aë>LÌÎB×\n~?334AÂ~?ªª«Â£Ö~?ÙBÜ)~@~~~Aë~~~~~~¿{@áH?ªª«ÀÑG®@y~@~~~¿{@áH~~~~~~~ÁáG®?A¸R~?~~Ahzá~?A(ö~@~~~ÁáG®~~~~~~~~~~~~~~??Ê=q¿Â\\~?~~?}p¤ÀhõÃ~@~~~~~~~~~~~~~~~~~~Á£\n=?Â\t£×~?~~@ò=p~?À« ~?ÙÀ~@~~~Á£\n<~~~~~~ÀG®@zá?ÀuÂ?ª=q~?~~@~{À\n=q~?@JáHÀ>¸R~?ÙÀ333?¯\\)~@~~~ÀG®@zá~\v~~~~~~Cªc×?~~C´ÁH~@~~~Cªc×~~~~~~¿Ó33?}p¤~~~~~?\\(ö?~~?~~?~ùÛ?~~~@~~~?\\(ö?~~~~~~~~~\trun_left~\v~~~~~~~~~~?~~~Àtzá~?~~~~~~~~~~~~Ãp{ÀÈ£×?~~~Ãp{À(Qì~?~~Ãp{ÀÈ£×~?À~Ãp{¿xQì~@~~~Ãp{ÀÈ£×~~~~~~~~~~~>LÌÎÁõÃ~?334Aôfe~?~~AW~@~~~~~~~~~~~~~~~~~~~~~?334¿s33?B\\~?~~>æff?÷\n=~@~~~~~~~~~~~~\b~~~~~~ÁÎzá?B\nQì~?~~?Ë ~?Á-ë~?ÙA34~@~~~ÁÎzà~~~~~~À½¸¾¨õÃ?~~?¦ff¿¾¸R~?Ù@L(öÀG\n=~@~~~À½¸¾¨õÃ~\t~~~~~~~~~~?""#@³×\n~?ªª«ÀÌÎ~@~~~~~~~~~~~~~~~~~~~~~?""#?=q¿333~?ªª«@{¿¸R~@~~~~~~~~~~~~\n~~>îîð~~~~?;»¼Áå×\n~?ffgÀ`~~~~~~~~~~~?~~ÂaH~@~~~~~~~~~~~~~An=qÁ.¸R~~~~~~Aë>LÌÎB×\n~?334AÂ~?ªª«Â£Ö~?ÙBÜ)~@~~~Aë~~~~~~¿{@áH?ªª«ÀÑG®@y~@~~~¿{@áH~~~~~~~ÁáG®?A¸R~?~~Ahzá~?A(ö~@~~~ÁáG®~~~~~~~~~~~~~~??Ê=q¿Â\\~?~~?}p¤ÀhõÃ~@~~~~~~~~~~~~~~~~~~Á£\n=?Â\t£×~?~~@ò=p~?À« ~?ÙÀ~@~~~Á£\n<~~~~~~ÀG®@zá?ÀuÂ?ª=q~?~~@~{À\n=q~?@JáHÀ>¸R~?ÙÀ333?¯\\)~@~~~ÀG®@zá~\v~~~~~~Cªc×?~~C´ÁH~@~~~Cªc×~~~~~~¿Ó33?}p¤~~~~~?\\(ö?~~?~~?~ùÛ?~~~@~~~?\\(ö?~~~~~~~~~¿~~?~~~~~~~~'];
fs['words/exceptions.txt'] = [6,'spices'];
fs['words/filter.gkg'] = [3052,'nrbyhf\nnubyr\nnany\nnanycebor\nnavyvathf\nnahf\nnerbyn\nnerbyr\nnevna\nnelna\nnff\nnffrng\nnffonat\nnffshpx\nnffung\nnffubyr\nnffznfgre\nnffzhapu\nnffjvcr\nnmm\nonyyfnpx\nonfgneq\nornare\norneqrqpynz\norngpu\nornire\norrlbgpu\norbgpu\novngpu\novtgvg\novzob\novgpu\novgpuneq\noybjwbo\nobbo\nobbovr\nobbol\nobbxvr\nobbgrr\nobbgvr\nobbgl\nohxxnxr\nohyyfuvg\nohyygheq\nohggshpx\nohggcyht\npnzrygbr\npnecrgzhapure\npnjx\npuvap\npuvax\npubqr\npyvg\npyvgbevf\npyvgbehf\npbpx\npbpxoybpx\npbpxubyfgre\npbpxxabpxre\npbpxfzbx\npbpxfzbxre\npbpxfhpx\npbpxfhpxre\npbba\npbexfhpxre\npenpxjuber\nphz\nphzz\nphzzva\nphzfubg\nphzfyhg\nphzfgnva\nphavyvathf\nphaavyvathf\nphag\nphagsnpr\nphaguhag\nphagyvpx\nqntb\nqnzzvg\nqnza\nqnzavg\nqvpx\nqvpxont\nqvpxqvcc\nqvpxsnpr\nqvpxsyvcc\nqvpxurnq\nqvpxvfu\nqvpxevcc\nqvpxfvcc\nqvpxjrrq\nqvpxjuvcc\nqvpxmvcc\nqvxr\nqvyqb\nqvyvtns\nqvcfuvc\nqvcfuvg\nqbbshf\nqbbfu\nqbhpur\nqbhpuront\nqhznff\nqhzonff\nqlxr\nrwnphyngr\nrerpg\nrerpgvba\nrffbuorr\nsnpx\nsnt\nsntt\nsnttrg\nsnttvg\nsnttbg\nsntbg\nsnvt\nsnvtg\nsnaalonaqvg\nsrypu\nsryyngr\nsryyngvb\nsrygpu\nsbnq\nsberfxva\nserrk\nsevtt\nsevttn\nsh\nshh\nshhh\nshhhh\nshpx\nshpxnff\nshpxsnpr\nshpxurnq\nshpxahttrg\nshpxahg\nshpxbss\nshpxgneq\nshpxhc\nshpxjnq\nshpxjvg\nshqtrcnpx\nshx\nshhpx\nshhhpx\nshhhhpx\nshhhhhpx\nsipx\nskpx\ntnr\ntnv\ntnl\ntrl\ntsl\ntunl\nturl\ntbngfr\ntbqnza\ntbqnzavg\ntbqqnz\ntbqqnzzvg\ntbqqnza\ntbyqrafubjre\ntbbx\ntevatb\ntfcbg\nthvqb\nunaqwbo\nuror\nurro\nuryy\nuvgyre\nubont\nubzb\nubbxre\nubbgre\nubeal\nuhffl\nulzra\nvaoerq\nvaprfg\nvawha\nwnpxnff\nwnpxubyr\nwnpxbss\nwnc\nwrexbss\nwvfz\nwvm\nwvmz\nwvmm\nxvxr\nxxx\nxyna\nxaboraq\nxbbpu\nxbbgpu\nxenhg\nxlxr\nynovn\nyrfob\nyrmob\nyrmmv\nyrmml\nznfgreongr\nznfgreong\nznfgreongvba\nznfgheongr\nznfgheong\nznfgheongvba\nznkv\nzrafrf\nzrafgehngr\nzrafgehngvba\nzrgu\nzshpxvat\nzbsb\nzbyrfg\nzbbyvr\nzbgureshpxn\nzbgureshpx\nzgureshpx\nzgueshpx\nzhss\nzhssqvire\nzhgunshpxnm\nzhgunshpx\nzhgureshpx\nzhgueshpx\nanxrq\nanmv\nanmvfz\narteb\navttn\navttnu\navttn\navttnm\navtt\navttyr\navtyrg\navccyr\nabbxl\nalzcub\nbshpx\nbeny\nbetnfz\nbetnfzvp\nbetvrf\nbetl\nbinel\nbihz\nbihzf\ncnqql\ncnxv\ncnagl\ncnfgvr\ncnfgl\ncpc\ncrpxre\ncrqb\ncrqbcuvyr\ncrqbcuvyvn\ncrqbcuvyvnp\ncrr\ncrrcrr\ncrargengr\ncrargengvba\ncravny\ncravyr\ncravf\ncrlbgr\ncunyyv\ncunyyvp\ncuhpx\ncvyybjovgre\ncvzc\ncvaxb\ncvff\ncvffbss\nczf\ncbynpx\ncbyybpx\ncbba\ncbbagnat\ncbea\ncbeab\ncbeabtencul\ncevpx\ncevt\ncebfgvghgr\ncehqr\nchor\nchovp\nchovf\nchaxnff\nchff\nchffv\nchffl\nchfflcbhaqre\nchgb\ndhrns\ndhrrs\ndhrrs\ndhrre\ndhrreb\ndhvpxl\ndhvz\nencr\nencrq\nencre\nencvfg\nenhapu\nerpgny\nerpghz\nerpghf\nerrsre\nerrgneq\nervpu\nergneq\nevzwbo\nevgneq\negneq\nehzcenzzre\nehfxv\nfpnt\nfpuybat\nfperj\nfpebt\nfpebg\nfpebgr\nfpebghz\nfpehq\nfphz\nfrzra\nfrk\nfrkhny\nfunzrqnzr\nfuvg\nfuvgr\nfuvgrngre\nfuvgsnpr\nfuvgurnq\nfuvgubyr\nfuvgubhfr\nfuvgg\nfuvm\nfvffl\nfxnt\nfxnax\nfynir\nfyrnmr\nfyrnml\nfyhg\nfyhgqhzcre\nfyhgxvff\nfzrtzn\nfzhg\nfzhgg\nfahss\nfbqbz\nfbhfr\nfbhfrq\nfcrez\nfcvp\nfcvpx\nfcvx\nfgvssl\nfgevc\nfgebxr\ngnzcba\ngneq\ngrnonttvat\ngrng\ngreq\ngrfgr\ngrfgrr\ngrfgvpyr\ngvg\ngvgshpx\ngvgv\ngvggvrshpx\ngvggv\ngvgg\ngvgglshpx\ngenzc\nghotvey\ngheq\nghfu\ngjng\nhtyl\nhaqvrf\nhevany\nhevar\nhgrehf\nint\nintvan\ninyvhz\nivnten\nihyin\njnq\njnat\njnax\njrravr\njvrare\njrvare\njrapu\njrgonpx\njuvgrl\njubenyvpvbhf\njuber\njubernyvpvbhf\njubersnpr\njuberubcc\njuberubhfr\njube\njvttre\njbbql\njbc\njgfuvg\njgshpx\nkengrq\nkkk\nlrnfgl\nlboob\nmnyhcn\n'];
fs['words/replacements.txt'] = [38,'blast\nrust\nspark\nburn\nbloop\nderp\nspice'];
}());